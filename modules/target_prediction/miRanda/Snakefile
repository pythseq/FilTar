#    FilTar: Integrating RNA-Seq data to improve microRNA target prediction accuracy in animals
#    Copyright (C) 2019 Thomas Bradley
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>

def get_dna_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return('data/' + sci_species_name + '.' + genome_build + '.dna.chromosome.{}.fa'.format(wildcards.chrom))

rule fix_fasta_output:
	input: "results/msa/{species}_{tissue}_chr{chrom}_3UTR.tmp2.fa"
	output: "results/msa/{species}_{tissue}_chr{chrom}.fa"
	shell: "sed 's/(+)//g' {input} | sed 's/(-)//g' > {output}"

rule miRanda:
	input:
		utr="results/msa/{species}_{tissue}_chr{chrom}.fa",
		mirna="data/mirbase_mature_{species}.filtered.fa"
	output: "results/targets/miRanda/{species}/{tissue}_chr{chrom}.txt"
	conda: "envs/miRanda.yaml"
	shell: "miranda {input.mirna} {input.utr} > {output}"

rule convert_miRanda_to_tsv:
        input: "results/targets/miRanda/{species}/{tissue}_chr{chrom}.txt"
        output: "results/targets/miRanda/{species}/{tissue}_chr{chrom}.temp.tsv"
        shell: "scripts/convert_miRanda_to_tsv.sh {input} {output}"

rule aggregate_miRanda_output_no_reannotation:
        input: lambda wildcards: expand("results/targets/miRanda/{species}/{tissue}_chr{chrom}.temp.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
        output: "results/targets/miRanda/{species}/{tissue}.temp.tsv"
        wildcard_constraints:
               tissue="((?!filt).)*"
        shell: "cat {input} > {output}"
